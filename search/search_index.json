{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"../README.md","title":"Home"},{"location":"Diferensial/","text":"A. Teori \u00b6 Persamaan Diferensial adalah persamaan yang memuat satu atau lebih variabel tak bebas beserta turunannya terhadap variabel-variabel bebas. Persamaan diferensial yang memuat suatu varibel tak bebas y dan variabel bebas x biasanya dinotasikan dengan : \\dfrac{dx}{dy} atau y'\\left( x\\right) atau y' Persamaan diferensial terbagi menjadi 2 macam, yaitu : a. Persamaan Diferensial Biasa (PDB) adalah persamaan diferensial yang melibatkan hanya satu variabel bebas. b. Persamaan Diferensial Parsial (PDP) adalah persamaan diferensial yang melibatkan lebih dari satu variabel bebas. B. Algoritma \u00b6 1. Metode Euler \u00b6 Metode Euler merupakan metode yang paling sederhana yang diturunkan dari deret taylor. Proses mencari nilai fungsi y(x) pada titik x tertentu dari persamaan diferensial biasa f(x, y) dengan menggunakan persamaan umum. Dengan demikian persamaan diferensial dapat diselesaikan melalui iterasi : \\begin{aligned}y_{0}=y\\left( a\\right) =a\\\\ f_{i+1}=f_{i}+hf\\left( t_{i},y\\right) \\end{aligned} Dengan, \\begin{aligned}h=\\left( b-a\\right) /n\\\\ t_{i}=a+ih\\end{aligned} Algoritma Metode Euler : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi menggunakan persamaan diatas. 2. Metode Runge-Kutta \u00b6 Metode Runge-Kutta merupakan metode yang memperoleh akurasi deret taylor tanpa memerlukan diferensiasi orde yang lebih tinggi. Metode Runge-Kutta Orde 4 sebagai berikut : y_{n+1}=y_{n}+\\dfrac{1}{6}\\left( k_{1}+2k_{2}+2k_{3}+k_{4}\\right) h atau, y_{n+1}=y_{n}+\\dfrac{h}{6}\\left( k_{1}+2k_{2}+2k_{3}+k_{4}\\right) h Algoritma Runge-Kutta Orde 4 : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi menggunakan Persamaan diatas. 3. Metode Heun \u00b6 Metode Heun menggunakan Metode Euler sebagai solusi awal perkiraan (prediksi). Solusi perkiraan awal tersebut akan diperbaiki dengan menggunakan metode Heun (koreksi). Berikut merupakan rumus dari metode heun : Prediksi : y_{i+1}^{0}=y_{i}+hf\\left( t_{i},y_{i}\\right) Koreksi : y_{i+1}=y_{i}+\\dfrac{h}{2}\\left[ f\\left( t_{i},y_{i}\\right) +f\\left( ti+1,y_{i+1}^{0}\\right) \\right] Algoritma Metode Heun : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan prediksi nilai awal dengan cara (Prediksi) diatas. 4.Lakukan koreksi nilai awal dengan cara (Koreksi) diatas. 5.Lakukan koreksi terhadap nilai koreksi yang dihasilkan sebelumnya menggunakan cara (Koreksi) diatas. 4. Metode Titik Tengah (Midpoint) \u00b6 Metode titik tengah (midpoint) merupakan metode yang menggunakan setengah step size pada metode Euler untuk melakukan estimasi terhadap integral suatu persamaan diferensial. Metode ini melakukan perhitungan melalui dua tahapan yaitu, menghitung nilai estimasi integral pada setengah step size dan menghitung nilai integral menggunkan hasil perhitungan setengah step size sebelumnya. Persamaan 1 : y_{i+\\dfrac{1}{2}}=y_{i}+f\\left( x_{i},y_{i}\\right) \\dfrac{h}{2} Persamaan 2 : y_{i+1}=y_{i}+f\\left( x_{i}+\\dfrac{1}{2},y_{i}+\\dfrac{1}{2}\\right) \\cdot h Algoritma Metode Titik Tengah (Midpoint) : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi pada setengah tahapan iterasi menggunakan Persamaan 1. 4.Lakukan iterasi pada setengah tahapan selanjutnya menggunakan Persamaan 2. 5. Metode Deret Taylor \u00b6 Deret Taylor merupakan deret dengan jumlah suku tak hingga. Berikut adalah pemahaman dari deret taylor : Fungsi f(x) yang diferensialkan di titik a : \\begin{aligned}f\\left( x\\right) = f\\left( a\\right) +\\dfrac{f'\\left( a\\right) }{1!}\\left( x-a\\right) +\\dfrac{f''\\left( a\\right) }{2!}\\left( x-a\\right) ^{2}+\\dfrac{f'''\\left( a\\right) }{3!}\\left( x-a\\right) ^{3}+\\ldots \\end{aligned} Algoritma Deret Taylor : 1.Tentukan turunan dari f(x) 2.Tentukan deret MacLaurin 3.Tentukan turunan-turunan yang diperlukan untuk menyelesaikan permasalahan . 4.Hasil dari perhitungan 6. Metode Deret MacLaurin \u00b6 Metode deret maclaurin hampir sama dengan deret taylor. perbedaannya apabila titik a = 0, maka deretnya dinamakan deret Maclaurin. Berikut adalah pemahaman dari deret Maclaurin : f\\left( x\\right) =f\\left( 0\\right) +\\dfrac{f^{'}\\left( 0\\right) }{1!}x+\\dfrac{f^{''}\\left( 0\\right) }{2!}x^{2}+\\dfrac{f^{'''}\\left( 0\\right) }{3!}X^{3}+\\ldots Algoritma Deret MacLaurin : 1.Tentukan turunan dari f(x) 2.Tentukan deret MacLaurin 3.Tentukan turunan-turunan yang diperlukan untuk menyelesaikan permasalahan . 4.Hasil dari perhitungan C. Coding \u00b6 Program python menggunakan Deret MacLaurin \u00b6 Pendekatan fungsi dari x^{e}-\\cos \\left( x\\right) sampai error yang dihasilkan kurang dari 0.001 untuk x=1 import math from math import factorial , exp , cos def main ( x , n ): hasil = 0.0 for i in range ( 0 , n ): hasil = hasil + x ** i / factorial ( i ) return hasil oldval = 0.0 # inisialisasi nilai awal x = 1 n = 1 trueval = exp ( x ) - cos ( x ) print ( \"nilai sesungguhnya :\" , \" %.8f \" % trueval ) print ( \"\" ) print ( 'faktor' , ' \\t ' , 'estimasi' , ' \\t ' , 'true error' , ' \\t ' , 'error relatif' ) ca = 1 while ( ca > 0.001 ): val = main ( x , n ) - cos ( x ) ct = abs (( val - trueval ) / trueval ) * 100 ca = abs (( val - oldval ) / val ) * 100 oldval = val print ( n , ' \\t ' , \" %.8f \" % val , ' \\t ' , \" %.8f \" % ct , ' \\t ' , \" %.8f \" % ca ) n += 1 print ( \"\" ) print ( \"nilai yang mendekati :\" , \" %.8f \" % val , \"dengan error :\" , \" %.8f \" % ct )","title":"Persamaan Diferensial Biasa"},{"location":"Diferensial/#a_teori","text":"Persamaan Diferensial adalah persamaan yang memuat satu atau lebih variabel tak bebas beserta turunannya terhadap variabel-variabel bebas. Persamaan diferensial yang memuat suatu varibel tak bebas y dan variabel bebas x biasanya dinotasikan dengan : \\dfrac{dx}{dy} atau y'\\left( x\\right) atau y' Persamaan diferensial terbagi menjadi 2 macam, yaitu : a. Persamaan Diferensial Biasa (PDB) adalah persamaan diferensial yang melibatkan hanya satu variabel bebas. b. Persamaan Diferensial Parsial (PDP) adalah persamaan diferensial yang melibatkan lebih dari satu variabel bebas.","title":"A. Teori"},{"location":"Diferensial/#b_algoritma","text":"","title":"B. Algoritma"},{"location":"Diferensial/#1_metode_euler","text":"Metode Euler merupakan metode yang paling sederhana yang diturunkan dari deret taylor. Proses mencari nilai fungsi y(x) pada titik x tertentu dari persamaan diferensial biasa f(x, y) dengan menggunakan persamaan umum. Dengan demikian persamaan diferensial dapat diselesaikan melalui iterasi : \\begin{aligned}y_{0}=y\\left( a\\right) =a\\\\ f_{i+1}=f_{i}+hf\\left( t_{i},y\\right) \\end{aligned} Dengan, \\begin{aligned}h=\\left( b-a\\right) /n\\\\ t_{i}=a+ih\\end{aligned} Algoritma Metode Euler : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi menggunakan persamaan diatas.","title":"1. Metode Euler"},{"location":"Diferensial/#2_metode_runge-kutta","text":"Metode Runge-Kutta merupakan metode yang memperoleh akurasi deret taylor tanpa memerlukan diferensiasi orde yang lebih tinggi. Metode Runge-Kutta Orde 4 sebagai berikut : y_{n+1}=y_{n}+\\dfrac{1}{6}\\left( k_{1}+2k_{2}+2k_{3}+k_{4}\\right) h atau, y_{n+1}=y_{n}+\\dfrac{h}{6}\\left( k_{1}+2k_{2}+2k_{3}+k_{4}\\right) h Algoritma Runge-Kutta Orde 4 : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi menggunakan Persamaan diatas.","title":"2. Metode Runge-Kutta"},{"location":"Diferensial/#3_metode_heun","text":"Metode Heun menggunakan Metode Euler sebagai solusi awal perkiraan (prediksi). Solusi perkiraan awal tersebut akan diperbaiki dengan menggunakan metode Heun (koreksi). Berikut merupakan rumus dari metode heun : Prediksi : y_{i+1}^{0}=y_{i}+hf\\left( t_{i},y_{i}\\right) Koreksi : y_{i+1}=y_{i}+\\dfrac{h}{2}\\left[ f\\left( t_{i},y_{i}\\right) +f\\left( ti+1,y_{i+1}^{0}\\right) \\right] Algoritma Metode Heun : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan prediksi nilai awal dengan cara (Prediksi) diatas. 4.Lakukan koreksi nilai awal dengan cara (Koreksi) diatas. 5.Lakukan koreksi terhadap nilai koreksi yang dihasilkan sebelumnya menggunakan cara (Koreksi) diatas.","title":"3. Metode Heun"},{"location":"Diferensial/#4_metode_titik_tengah_midpoint","text":"Metode titik tengah (midpoint) merupakan metode yang menggunakan setengah step size pada metode Euler untuk melakukan estimasi terhadap integral suatu persamaan diferensial. Metode ini melakukan perhitungan melalui dua tahapan yaitu, menghitung nilai estimasi integral pada setengah step size dan menghitung nilai integral menggunkan hasil perhitungan setengah step size sebelumnya. Persamaan 1 : y_{i+\\dfrac{1}{2}}=y_{i}+f\\left( x_{i},y_{i}\\right) \\dfrac{h}{2} Persamaan 2 : y_{i+1}=y_{i}+f\\left( x_{i}+\\dfrac{1}{2},y_{i}+\\dfrac{1}{2}\\right) \\cdot h Algoritma Metode Titik Tengah (Midpoint) : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi pada setengah tahapan iterasi menggunakan Persamaan 1. 4.Lakukan iterasi pada setengah tahapan selanjutnya menggunakan Persamaan 2.","title":"4. Metode Titik Tengah (Midpoint)"},{"location":"Diferensial/#5_metode_deret_taylor","text":"Deret Taylor merupakan deret dengan jumlah suku tak hingga. Berikut adalah pemahaman dari deret taylor : Fungsi f(x) yang diferensialkan di titik a : \\begin{aligned}f\\left( x\\right) = f\\left( a\\right) +\\dfrac{f'\\left( a\\right) }{1!}\\left( x-a\\right) +\\dfrac{f''\\left( a\\right) }{2!}\\left( x-a\\right) ^{2}+\\dfrac{f'''\\left( a\\right) }{3!}\\left( x-a\\right) ^{3}+\\ldots \\end{aligned} Algoritma Deret Taylor : 1.Tentukan turunan dari f(x) 2.Tentukan deret MacLaurin 3.Tentukan turunan-turunan yang diperlukan untuk menyelesaikan permasalahan . 4.Hasil dari perhitungan","title":"5. Metode Deret Taylor"},{"location":"Diferensial/#6_metode_deret_maclaurin","text":"Metode deret maclaurin hampir sama dengan deret taylor. perbedaannya apabila titik a = 0, maka deretnya dinamakan deret Maclaurin. Berikut adalah pemahaman dari deret Maclaurin : f\\left( x\\right) =f\\left( 0\\right) +\\dfrac{f^{'}\\left( 0\\right) }{1!}x+\\dfrac{f^{''}\\left( 0\\right) }{2!}x^{2}+\\dfrac{f^{'''}\\left( 0\\right) }{3!}X^{3}+\\ldots Algoritma Deret MacLaurin : 1.Tentukan turunan dari f(x) 2.Tentukan deret MacLaurin 3.Tentukan turunan-turunan yang diperlukan untuk menyelesaikan permasalahan . 4.Hasil dari perhitungan","title":"6. Metode Deret MacLaurin"},{"location":"Diferensial/#c_coding","text":"","title":"C. Coding"},{"location":"Diferensial/#program_python_menggunakan_deret_maclaurin","text":"Pendekatan fungsi dari x^{e}-\\cos \\left( x\\right) sampai error yang dihasilkan kurang dari 0.001 untuk x=1 import math from math import factorial , exp , cos def main ( x , n ): hasil = 0.0 for i in range ( 0 , n ): hasil = hasil + x ** i / factorial ( i ) return hasil oldval = 0.0 # inisialisasi nilai awal x = 1 n = 1 trueval = exp ( x ) - cos ( x ) print ( \"nilai sesungguhnya :\" , \" %.8f \" % trueval ) print ( \"\" ) print ( 'faktor' , ' \\t ' , 'estimasi' , ' \\t ' , 'true error' , ' \\t ' , 'error relatif' ) ca = 1 while ( ca > 0.001 ): val = main ( x , n ) - cos ( x ) ct = abs (( val - trueval ) / trueval ) * 100 ca = abs (( val - oldval ) / val ) * 100 oldval = val print ( n , ' \\t ' , \" %.8f \" % val , ' \\t ' , \" %.8f \" % ct , ' \\t ' , \" %.8f \" % ca ) n += 1 print ( \"\" ) print ( \"nilai yang mendekati :\" , \" %.8f \" % val , \"dengan error :\" , \" %.8f \" % ct )","title":"Program python menggunakan Deret MacLaurin"},{"location":"Sistem%20Persamaan%20Linear/","text":"A. Teori \u00b6 Definisi Sistem Persamaan Linear \u00b6 \u200b Sistem Persamaan Linear adalah salah satu model matematika yang banyak dijumpai dalam berbagai disiplin ilmu. sistem-sistem persamaan linear muncul secara langsung dari masalah nyata dan merupakan bagian dari proses penyelesaian masalah-masalah lainnya. Bentuk umum Sistem Persamaan Linear \u00b6 a. Sistem Persamaan Linear Dua Variabel (SPLDV) \u200b Sistem Persamaan Linear Dua Variabel adalah sistem persamaan yang merupakan terdiri dari dua persamaan yang dimana masing-masing persamaan memiliki dua variabel. Contoh SPLDV dengan dua variabel x dan y : \\begin{cases}ax+by=c\\\\ ex+fy=g\\end{cases} yang dimana a,b,c,e,f,g merupakan bilangan asli atau real. b. Ssitem Persamaan Linear Tiga Variabel (SPLTV) \u200b Sistem Persamaan Linear Tiga Variabel adalah sistem persamaan yang merupakan terdiri dari tiga persamaan yang dimana masing-masing persamaan memiliki tiga variabel. Contoh SPLTV dengan tiga variabel x, y, dan z : \\begin{cases}ax+by+cz=d\\\\ ex+Fy+gz=h\\\\ mx+ny+oz=p\\end{cases} yang dimana a,b,c,d,e,f,g,h,m,n,o,p merupakan bilangan asli atau real. B. Algoritma \u00b6 Eliminasi Gauss \u00b6 \u200b Eliminasi Gauss merupakan penyelesaian sebuah sistem persamaan linear dengan mengubah SPL tersebut ke dalam bentuk sistem persamaan linear berbentuk segitiga dengan menyamakan semua koefisien di bawah diagonal umumnya bernilai nol. \u200b Penyelesaian persamaan linear dapat menggunakan substitusi (penyulihan) balik dan menggunakan sejumlah Operasi Baris Elementer (OBE) : Menukar posisi dua buah persamaan (dua baris matriks augmented). Menambah sebuah persamaan (baris matriks augmented) dengan suatu kelipatan persamaan lain (baris lain). Mengalikan sebuah persamaan (baris matriks augmented) dengan sebarang konstanta taknol. Metode Gauss-Jordan \u00b6 \u200b Metode gauss jordan sama dengan eliminasi gauss. Dalam metode Gauss-Jordan bilangan yang tidak diketahui di eliminasi dari semua persamaan, yang dalam metode Gauss bilangan tersebut di eliminasi dari persamaan berikutnya. \u200b Penyelesaian persamaan linear gauss jordan : Menukar posisi dua buah persamaan (dua baris matriks augmented). Menambah sebuah persamaan (baris matriks augmented) dengan suatu kelipatan persamaan lain (baris lain). Mengalikan sebuah persamaan (baris matriks augmented) dengan sebarang konstanta taknol. Metode Iterasi \u00b6 \u200b Metode iterasi lebih baik dari pada metode langsung. Metode ini juga dapat digunakan untuk menyelesaikan sistem penyelesaian tidak linear. Metode iterasi terbagi menjadi dua bagian, yaitu metode jacobi dan Gauss-Seidel. a. Metode Jacobi Metode jacobi merupakan metode iterasi yang menghitung nilai hampiran sekrang atau terbaru dengan mengacu pada nilai hampiran sebelumnya. Bentuk umum iterasi jacobi : Xi^{\\left( k\\right) }=\\dfrac{1}{a_{ii}}\\left( bi-\\sum ^{n}_{j\\neq i}a_{ij}X_{j}^{\\left( k-1\\right) }\\right) b. Metode Gauss-Seidel Metode gauss-seidel merupakan metode iterasi yang menghitung nilai hampiran sekarang dengan mangacu pada nilai hampiran terbaru. Bentuk umum iterasi Gauss-Seidel : Xi^{(k)}=\\dfrac{1}{a_{ii}}\\left( bi-\\sum ^{i-1}_{j=1}aijX_{j}^{\\left( k\\right) }-\\sum ^{n}_{j=i+1}a_{ij}X_{j}^{\\left( k-1\\right) }\\right) C. Coding \u00b6 Program Python Sistem Persamaan Linear \u00b6 Eliminasi Gauss matrik =[ [[6,-2,2,4,2,1,3,-1,2,3 ] , [ \"X1\" ] , [ 17 ] ] , [ [12,-8,6,10,1,2,-2,-1,-2,1 ] , [ \"X2\" ] , [ 26 ] ] , [ [3,-13,9,3,-2,1,1,2,-3,-2 ] , [ \"X3\" ] , [ -24 ] ] , [ [-6,4,1,-18,-1,1,2,-3,1,-2 ] , [ \"X4\" ] , [ -40 ] ] , [ [-1,2,1,-3,1,2,-4,2,1,3 ] , [ \"X5\" ] , [ 15 ] ] , [ [2,1,3,4,3,1,6,1,-5,2 ] , [ \"X6\" ] , [ -19 ] ] , [ [4,-1,-3,-4,3,14,-4,2,-5,1 ] , [ \"X7\" ] , [ 36 ] ] , [ [2,-5,10,5,1,-7,2,1,-9,4 ] , [ \"X8\" ] , [ -54 ] ] , [ [1,-8,2,1,2,-7,3,4,-1,5 ] , [ \"X9\" ] , [ -20 ] ] , [ [4,-2,1,3,4,1,2,-1,-2,10 ] , [ \"X10\" ] , [ 7 ] ] , ] # matrik =[ # [[2,1,1,3 ] , [ \"X1\" ] , [ 10 ] ] , # [ [1,2,2,1 ] , [ \"X2\" ] , [ 12 ] ] , # [ [1,1,2,2 ] , [ \"X3\" ] , [ 10 ] ] , # [ [3,2,2,1 ] , [ \"X4\" ] , [ 14 ] ] , # ] print ( \"Persamaan Linear dalam bentuk matrik : \" ) for u in matrik : print ( u ) print ( \"\\n\" ) #untuk Eliminasi Maju for k in range ( 0 , len ( matrik ) - 1 ) : for i in range ( k + 1 , len ( matrik )) : faktor = matrik [ i ][ 0 ][ k ]/ matrik [ k ][ 0 ][ k ] print ( \"faktor = \" , faktor ) for j in range ( k , len ( matrik )) : matrik [ i ][ 0 ][ j ]= round ( matrik [ i ][ 0 ][ j ]- ( faktor * matrik [ k ][ 0 ][ j ] ), 4 ) matrik [ i ][ 2 ][ 0 ]= round ( matrik [ i ][ 2 ][ 0 ]- ( faktor * matrik [ k ][ 2 ][ 0 ] ), 2 ) for u in matrik : print ( u ) print ( \"\\n\" ) #Untuk Substitusi Mundur for i in range ( len ( matrik ) - 1 , - 1 , - 1 ) : sum = matrik [ i ][ 2 ][ 0 ] for j in range ( i + 1 , len ( matrik )) : sum = sum - round (( matrik [ i ][ 0 ][ j ]* matrik [ j ][ 1 ][ 0 ] ), 4 ) matrik [ i ][ 1 ][ 0 ]= round ( sum / matrik [ i ][ 0 ][ i ] , 4 ) for u in matrik : print ( u ) print ( \"\\n\" ) for u in matrik : print ( u ) print ( \"Nilai Variabel yang diperoleh\" ) for u in range ( len ( matrik [ 0 ][ 0 ] )) : print ( f \"x{u+1} = {round(matrik[u][1][0],4)}\" ) Metode Gauss-Jacobi matrik =[ [[11,-1,2,0,2,1,1,1,2,3 ] , [ \"X1\" ] , [ 14 ] ] , [ [-1,11,-1,3,1,2,2,2,1,1 ] , [ \"X2\" ] , [ 25 ] ] , [ [2,-1,10,-1,0,1,-2,1,3,3 ] , [ \"X3\" ] , [ 2 ] ] , [ [0,3,-1,8,1,0,2,-1,2,2 ] , [ \"X4\" ] , [ 17 ] ] , [ [1,2,0,1,2,-1,0,1,-3,4 ] , [ \"X5\" ] , [ 8 ] ] , [ [1,2,0,1,2,2,2,2,2,1 ] , [ \"X6\" ] , [ 9 ] ] , [ [1,2,0,1,2,2,3,0,1,-2 ] , [ \"X7\" ] , [ 0 ] ] , [ [1,2,0,1,2,2,3,2,0,-1 ] , [ \"X8\" ] , [ 1 ] ] , [ [1,2,0,1,2,2,3,2,-2,0 ] , [ \"X9\" ] , [ -2 ] ] , [ [1,2,0,1,2,2,3,2,-2,-2 ] , [ \"X10\" ] , [ -4 ] ] , ] for i in range ( len ( matrik [ 0 ][ 0 ] )) : matrik [ i ][ 1 ][ 0 ]= 0 K1 = [] for k in range ( 10 ) : for i in range ( len ( matrik )) : # print ( k , i ) Xi = matrik [ i ][ 1 ][ 0 ] # print ( \"Xi = \" , Xi ) sum = matrik [ i ][ 2 ][ 0 ] # print ( \"sum = \" , sum ) for j in range ( len ( matrik )) : if i == j : continue sum = sum - matrik [ i ][ 0 ][ j ]* matrik [ j ][ 1 ][ 0 ] # print ( f \"matrik[i][0][j] ={matrik[i][0][j]} matrik[i][1][0] = {matrik[j][1][0]}\" ) # print ( f \"sum{j} = \" , sum ) matrik [ i ][ 1 ][ 0 ]= sum / matrik [ i ][ 0 ][ i ] K1 . append ( matrik [ i ][ 1 ][ 0 ] ) for i in range ( len ( matrik )) : matrik [ i ][ 1 ][ 0 ]= K1 [ i ] K1 . clear () print ( f \"Perulangan {k+1}\" ) for i in matrik : print ( i ) Metode Gauss-Seidel matrik =[ [[11,-1,2,0,2,1,1,1,2,3 ] , [ \"X1\" ] , [ 14 ] ] , [ [-1,11,-1,3,1,2,2,2,1,1 ] , [ \"X2\" ] , [ 25 ] ] , [ [2,-1,10,-1,0,1,-2,1,3,3 ] , [ \"X3\" ] , [ 2 ] ] , [ [0,3,-1,8,1,0,2,-1,2,2 ] , [ \"X4\" ] , [ 17 ] ] , [ [1,2,0,1,2,-1,0,1,-3,4 ] , [ \"X5\" ] , [ 8 ] ] , [ [1,2,0,1,2,2,2,2,2,1 ] , [ \"X6\" ] , [ 9 ] ] , [ [1,2,0,1,2,2,3,0,1,-2 ] , [ \"X7\" ] , [ 0 ] ] , [ [1,2,0,1,2,2,3,2,0,-1 ] , [ \"X8\" ] , [ 1 ] ] , [ [1,2,0,1,2,2,3,2,-2,0 ] , [ \"X9\" ] , [ -2 ] ] , [ [1,2,0,1,2,2,3,2,-2,-2 ] , [ \"X10\" ] , [ -4 ] ] , ] for i in range ( len ( matrik [ 0 ][ 0 ] )) : matrik [ i ][ 1 ][ 0 ]= 0 for k in range ( 3 ) : for i in range ( len ( matrik )) : # print ( k , i ) Xi = matrik [ i ][ 1 ][ 0 ] # print ( \"Xi = \" , Xi ) sum = matrik [ i ][ 2 ][ 0 ] # print ( \"sum = \" , sum ) for j in range ( len ( matrik )) : if j == i : continue sum = sum - matrik [ i ][ 0 ][ j ]* matrik [ j ][ 1 ][ 0 ] # print ( f \"matrik[i][0][j] ={matrik[i][0][j]} matrik[i][1][0] = {matrik[j][1][0]}\" ) # print ( f \"sum{j} = \" , sum ) matrik [ i ][ 1 ][ 0 ]= sum / matrik [ i ][ 0 ][ i ] print ( f \"Perulangan {k+1}\" ) for i in matrik : print ( i ) Eliminasi Gauss Jordan import numpy A = numpy . array ([[ 25 , 5 , 1 , 106.2 ], [ 64 , 8 , 1 , 177.2 ], [ 144 , 12 , 1 , 279.2 ]]) print ( A ) n = len ( A ) x = numpy . zeros ( n ) for k in range ( n ): pivot = A [ k ][ k ] A [ k ] = A [ k ] / pivot #print(A) for i in range ( n ): if i == k : continue factor = A [ i ][ k ] for j in range ( k , n + 1 ): A [ i ][ j ] = A [ i ][ j ] - factor * A [ k ][ j ] print ( A ) x = A [:, n ] print ( x )","title":"Sistem Persamaan Linear"},{"location":"Sistem%20Persamaan%20Linear/#a_teori","text":"","title":"A. Teori"},{"location":"Sistem%20Persamaan%20Linear/#definisi_sistem_persamaan_linear","text":"\u200b Sistem Persamaan Linear adalah salah satu model matematika yang banyak dijumpai dalam berbagai disiplin ilmu. sistem-sistem persamaan linear muncul secara langsung dari masalah nyata dan merupakan bagian dari proses penyelesaian masalah-masalah lainnya.","title":"Definisi Sistem Persamaan Linear"},{"location":"Sistem%20Persamaan%20Linear/#bentuk_umum_sistem_persamaan_linear","text":"a. Sistem Persamaan Linear Dua Variabel (SPLDV) \u200b Sistem Persamaan Linear Dua Variabel adalah sistem persamaan yang merupakan terdiri dari dua persamaan yang dimana masing-masing persamaan memiliki dua variabel. Contoh SPLDV dengan dua variabel x dan y : \\begin{cases}ax+by=c\\\\ ex+fy=g\\end{cases} yang dimana a,b,c,e,f,g merupakan bilangan asli atau real. b. Ssitem Persamaan Linear Tiga Variabel (SPLTV) \u200b Sistem Persamaan Linear Tiga Variabel adalah sistem persamaan yang merupakan terdiri dari tiga persamaan yang dimana masing-masing persamaan memiliki tiga variabel. Contoh SPLTV dengan tiga variabel x, y, dan z : \\begin{cases}ax+by+cz=d\\\\ ex+Fy+gz=h\\\\ mx+ny+oz=p\\end{cases} yang dimana a,b,c,d,e,f,g,h,m,n,o,p merupakan bilangan asli atau real.","title":"Bentuk umum Sistem Persamaan Linear"},{"location":"Sistem%20Persamaan%20Linear/#b_algoritma","text":"","title":"B. Algoritma"},{"location":"Sistem%20Persamaan%20Linear/#eliminasi_gauss","text":"\u200b Eliminasi Gauss merupakan penyelesaian sebuah sistem persamaan linear dengan mengubah SPL tersebut ke dalam bentuk sistem persamaan linear berbentuk segitiga dengan menyamakan semua koefisien di bawah diagonal umumnya bernilai nol. \u200b Penyelesaian persamaan linear dapat menggunakan substitusi (penyulihan) balik dan menggunakan sejumlah Operasi Baris Elementer (OBE) : Menukar posisi dua buah persamaan (dua baris matriks augmented). Menambah sebuah persamaan (baris matriks augmented) dengan suatu kelipatan persamaan lain (baris lain). Mengalikan sebuah persamaan (baris matriks augmented) dengan sebarang konstanta taknol.","title":"Eliminasi Gauss"},{"location":"Sistem%20Persamaan%20Linear/#metode_gauss-jordan","text":"\u200b Metode gauss jordan sama dengan eliminasi gauss. Dalam metode Gauss-Jordan bilangan yang tidak diketahui di eliminasi dari semua persamaan, yang dalam metode Gauss bilangan tersebut di eliminasi dari persamaan berikutnya. \u200b Penyelesaian persamaan linear gauss jordan : Menukar posisi dua buah persamaan (dua baris matriks augmented). Menambah sebuah persamaan (baris matriks augmented) dengan suatu kelipatan persamaan lain (baris lain). Mengalikan sebuah persamaan (baris matriks augmented) dengan sebarang konstanta taknol.","title":"Metode Gauss-Jordan"},{"location":"Sistem%20Persamaan%20Linear/#metode_iterasi","text":"\u200b Metode iterasi lebih baik dari pada metode langsung. Metode ini juga dapat digunakan untuk menyelesaikan sistem penyelesaian tidak linear. Metode iterasi terbagi menjadi dua bagian, yaitu metode jacobi dan Gauss-Seidel. a. Metode Jacobi Metode jacobi merupakan metode iterasi yang menghitung nilai hampiran sekrang atau terbaru dengan mengacu pada nilai hampiran sebelumnya. Bentuk umum iterasi jacobi : Xi^{\\left( k\\right) }=\\dfrac{1}{a_{ii}}\\left( bi-\\sum ^{n}_{j\\neq i}a_{ij}X_{j}^{\\left( k-1\\right) }\\right) b. Metode Gauss-Seidel Metode gauss-seidel merupakan metode iterasi yang menghitung nilai hampiran sekarang dengan mangacu pada nilai hampiran terbaru. Bentuk umum iterasi Gauss-Seidel : Xi^{(k)}=\\dfrac{1}{a_{ii}}\\left( bi-\\sum ^{i-1}_{j=1}aijX_{j}^{\\left( k\\right) }-\\sum ^{n}_{j=i+1}a_{ij}X_{j}^{\\left( k-1\\right) }\\right)","title":"Metode Iterasi"},{"location":"Sistem%20Persamaan%20Linear/#c_coding","text":"","title":"C. Coding"},{"location":"Sistem%20Persamaan%20Linear/#program_python_sistem_persamaan_linear","text":"Eliminasi Gauss matrik =[ [[6,-2,2,4,2,1,3,-1,2,3 ] , [ \"X1\" ] , [ 17 ] ] , [ [12,-8,6,10,1,2,-2,-1,-2,1 ] , [ \"X2\" ] , [ 26 ] ] , [ [3,-13,9,3,-2,1,1,2,-3,-2 ] , [ \"X3\" ] , [ -24 ] ] , [ [-6,4,1,-18,-1,1,2,-3,1,-2 ] , [ \"X4\" ] , [ -40 ] ] , [ [-1,2,1,-3,1,2,-4,2,1,3 ] , [ \"X5\" ] , [ 15 ] ] , [ [2,1,3,4,3,1,6,1,-5,2 ] , [ \"X6\" ] , [ -19 ] ] , [ [4,-1,-3,-4,3,14,-4,2,-5,1 ] , [ \"X7\" ] , [ 36 ] ] , [ [2,-5,10,5,1,-7,2,1,-9,4 ] , [ \"X8\" ] , [ -54 ] ] , [ [1,-8,2,1,2,-7,3,4,-1,5 ] , [ \"X9\" ] , [ -20 ] ] , [ [4,-2,1,3,4,1,2,-1,-2,10 ] , [ \"X10\" ] , [ 7 ] ] , ] # matrik =[ # [[2,1,1,3 ] , [ \"X1\" ] , [ 10 ] ] , # [ [1,2,2,1 ] , [ \"X2\" ] , [ 12 ] ] , # [ [1,1,2,2 ] , [ \"X3\" ] , [ 10 ] ] , # [ [3,2,2,1 ] , [ \"X4\" ] , [ 14 ] ] , # ] print ( \"Persamaan Linear dalam bentuk matrik : \" ) for u in matrik : print ( u ) print ( \"\\n\" ) #untuk Eliminasi Maju for k in range ( 0 , len ( matrik ) - 1 ) : for i in range ( k + 1 , len ( matrik )) : faktor = matrik [ i ][ 0 ][ k ]/ matrik [ k ][ 0 ][ k ] print ( \"faktor = \" , faktor ) for j in range ( k , len ( matrik )) : matrik [ i ][ 0 ][ j ]= round ( matrik [ i ][ 0 ][ j ]- ( faktor * matrik [ k ][ 0 ][ j ] ), 4 ) matrik [ i ][ 2 ][ 0 ]= round ( matrik [ i ][ 2 ][ 0 ]- ( faktor * matrik [ k ][ 2 ][ 0 ] ), 2 ) for u in matrik : print ( u ) print ( \"\\n\" ) #Untuk Substitusi Mundur for i in range ( len ( matrik ) - 1 , - 1 , - 1 ) : sum = matrik [ i ][ 2 ][ 0 ] for j in range ( i + 1 , len ( matrik )) : sum = sum - round (( matrik [ i ][ 0 ][ j ]* matrik [ j ][ 1 ][ 0 ] ), 4 ) matrik [ i ][ 1 ][ 0 ]= round ( sum / matrik [ i ][ 0 ][ i ] , 4 ) for u in matrik : print ( u ) print ( \"\\n\" ) for u in matrik : print ( u ) print ( \"Nilai Variabel yang diperoleh\" ) for u in range ( len ( matrik [ 0 ][ 0 ] )) : print ( f \"x{u+1} = {round(matrik[u][1][0],4)}\" ) Metode Gauss-Jacobi matrik =[ [[11,-1,2,0,2,1,1,1,2,3 ] , [ \"X1\" ] , [ 14 ] ] , [ [-1,11,-1,3,1,2,2,2,1,1 ] , [ \"X2\" ] , [ 25 ] ] , [ [2,-1,10,-1,0,1,-2,1,3,3 ] , [ \"X3\" ] , [ 2 ] ] , [ [0,3,-1,8,1,0,2,-1,2,2 ] , [ \"X4\" ] , [ 17 ] ] , [ [1,2,0,1,2,-1,0,1,-3,4 ] , [ \"X5\" ] , [ 8 ] ] , [ [1,2,0,1,2,2,2,2,2,1 ] , [ \"X6\" ] , [ 9 ] ] , [ [1,2,0,1,2,2,3,0,1,-2 ] , [ \"X7\" ] , [ 0 ] ] , [ [1,2,0,1,2,2,3,2,0,-1 ] , [ \"X8\" ] , [ 1 ] ] , [ [1,2,0,1,2,2,3,2,-2,0 ] , [ \"X9\" ] , [ -2 ] ] , [ [1,2,0,1,2,2,3,2,-2,-2 ] , [ \"X10\" ] , [ -4 ] ] , ] for i in range ( len ( matrik [ 0 ][ 0 ] )) : matrik [ i ][ 1 ][ 0 ]= 0 K1 = [] for k in range ( 10 ) : for i in range ( len ( matrik )) : # print ( k , i ) Xi = matrik [ i ][ 1 ][ 0 ] # print ( \"Xi = \" , Xi ) sum = matrik [ i ][ 2 ][ 0 ] # print ( \"sum = \" , sum ) for j in range ( len ( matrik )) : if i == j : continue sum = sum - matrik [ i ][ 0 ][ j ]* matrik [ j ][ 1 ][ 0 ] # print ( f \"matrik[i][0][j] ={matrik[i][0][j]} matrik[i][1][0] = {matrik[j][1][0]}\" ) # print ( f \"sum{j} = \" , sum ) matrik [ i ][ 1 ][ 0 ]= sum / matrik [ i ][ 0 ][ i ] K1 . append ( matrik [ i ][ 1 ][ 0 ] ) for i in range ( len ( matrik )) : matrik [ i ][ 1 ][ 0 ]= K1 [ i ] K1 . clear () print ( f \"Perulangan {k+1}\" ) for i in matrik : print ( i ) Metode Gauss-Seidel matrik =[ [[11,-1,2,0,2,1,1,1,2,3 ] , [ \"X1\" ] , [ 14 ] ] , [ [-1,11,-1,3,1,2,2,2,1,1 ] , [ \"X2\" ] , [ 25 ] ] , [ [2,-1,10,-1,0,1,-2,1,3,3 ] , [ \"X3\" ] , [ 2 ] ] , [ [0,3,-1,8,1,0,2,-1,2,2 ] , [ \"X4\" ] , [ 17 ] ] , [ [1,2,0,1,2,-1,0,1,-3,4 ] , [ \"X5\" ] , [ 8 ] ] , [ [1,2,0,1,2,2,2,2,2,1 ] , [ \"X6\" ] , [ 9 ] ] , [ [1,2,0,1,2,2,3,0,1,-2 ] , [ \"X7\" ] , [ 0 ] ] , [ [1,2,0,1,2,2,3,2,0,-1 ] , [ \"X8\" ] , [ 1 ] ] , [ [1,2,0,1,2,2,3,2,-2,0 ] , [ \"X9\" ] , [ -2 ] ] , [ [1,2,0,1,2,2,3,2,-2,-2 ] , [ \"X10\" ] , [ -4 ] ] , ] for i in range ( len ( matrik [ 0 ][ 0 ] )) : matrik [ i ][ 1 ][ 0 ]= 0 for k in range ( 3 ) : for i in range ( len ( matrik )) : # print ( k , i ) Xi = matrik [ i ][ 1 ][ 0 ] # print ( \"Xi = \" , Xi ) sum = matrik [ i ][ 2 ][ 0 ] # print ( \"sum = \" , sum ) for j in range ( len ( matrik )) : if j == i : continue sum = sum - matrik [ i ][ 0 ][ j ]* matrik [ j ][ 1 ][ 0 ] # print ( f \"matrik[i][0][j] ={matrik[i][0][j]} matrik[i][1][0] = {matrik[j][1][0]}\" ) # print ( f \"sum{j} = \" , sum ) matrik [ i ][ 1 ][ 0 ]= sum / matrik [ i ][ 0 ][ i ] print ( f \"Perulangan {k+1}\" ) for i in matrik : print ( i ) Eliminasi Gauss Jordan import numpy A = numpy . array ([[ 25 , 5 , 1 , 106.2 ], [ 64 , 8 , 1 , 177.2 ], [ 144 , 12 , 1 , 279.2 ]]) print ( A ) n = len ( A ) x = numpy . zeros ( n ) for k in range ( n ): pivot = A [ k ][ k ] A [ k ] = A [ k ] / pivot #print(A) for i in range ( n ): if i == k : continue factor = A [ i ][ k ] for j in range ( k , n + 1 ): A [ i ][ j ] = A [ i ][ j ] - factor * A [ k ][ j ] print ( A ) x = A [:, n ] print ( x )","title":"Program Python Sistem Persamaan Linear"},{"location":"Turunan-Numerik/","text":"Turunan Numerik \u00b6 Turunan numerik Newton-Gregory Backward (NGB) Deret Taylor Hampiran Polinom interpolasi Rumus Turunan dengan Deret Taylor \u00b6 Perhitungan Turunan Numerik dengan pendekatan selisih mundur. f^{1}\\left( x_{0}\\right) =\\dfrac{f\\left( x_{0}\\right) -f\\left( x_{0}-h\\right) }{h}=\\dfrac{f_{0}-f_{-1}}{h} Pendekatan perhitungan turunan pertama selisih mundur. f_{i}'=\\dfrac{f_{i}-f_{i-1}}{h}+O\\left( h\\right) Dalam hal ini galat berupa : O\\left( h\\right) =h/2f^{11}\\left( t\\right) ,x_{i-1} <t <x_{i} Untuk nilai- nilai f di X0 dan X1 dengan persamaan rumusnya : f_{0}'=\\dfrac{f_{0}-f_{1}}{h}+O\\left( h\\right) dalam hal ini, O\\left( h\\right) =h/2f^{11}\\left( t\\right) ,x_{i-1} <t <x_{i} Pendekatan Turunan kedua selisih mundur Dengan cara sama seperti sebelumnya, diperoleh : f_{i}''=\\dfrac{f_{i-2}-2f_{i-1}+f_{i}}{h^{2}}+O\\left( h\\right) dalam hal ini, O\\left( h\\right) =hf''\\left( t\\right) ,x_{i-2} <t <x_{i} Untuk nilai-nilai f di X-2, X0, dan X1 persamaan rumusnya : f_{0}''=\\dfrac{f_{i-2}-2f_{-1}+f_{0}}{h^{2}}+O\\left( h\\right) dalam hal ini, O\\left( h\\right) =hf''\\left( t\\right) ,x_{i-2} <t <x_{i} Rumus Turunan dengan Hampiran Polinom Interpolasi \u00b6","title":"Turunan Numerik"},{"location":"Turunan-Numerik/#turunan_numerik","text":"Turunan numerik Newton-Gregory Backward (NGB) Deret Taylor Hampiran Polinom interpolasi","title":"Turunan Numerik"},{"location":"Turunan-Numerik/#rumus_turunan_dengan_deret_taylor","text":"Perhitungan Turunan Numerik dengan pendekatan selisih mundur. f^{1}\\left( x_{0}\\right) =\\dfrac{f\\left( x_{0}\\right) -f\\left( x_{0}-h\\right) }{h}=\\dfrac{f_{0}-f_{-1}}{h} Pendekatan perhitungan turunan pertama selisih mundur. f_{i}'=\\dfrac{f_{i}-f_{i-1}}{h}+O\\left( h\\right) Dalam hal ini galat berupa : O\\left( h\\right) =h/2f^{11}\\left( t\\right) ,x_{i-1} <t <x_{i} Untuk nilai- nilai f di X0 dan X1 dengan persamaan rumusnya : f_{0}'=\\dfrac{f_{0}-f_{1}}{h}+O\\left( h\\right) dalam hal ini, O\\left( h\\right) =h/2f^{11}\\left( t\\right) ,x_{i-1} <t <x_{i} Pendekatan Turunan kedua selisih mundur Dengan cara sama seperti sebelumnya, diperoleh : f_{i}''=\\dfrac{f_{i-2}-2f_{i-1}+f_{i}}{h^{2}}+O\\left( h\\right) dalam hal ini, O\\left( h\\right) =hf''\\left( t\\right) ,x_{i-2} <t <x_{i} Untuk nilai-nilai f di X-2, X0, dan X1 persamaan rumusnya : f_{0}''=\\dfrac{f_{i-2}-2f_{-1}+f_{0}}{h^{2}}+O\\left( h\\right) dalam hal ini, O\\left( h\\right) =hf''\\left( t\\right) ,x_{i-2} <t <x_{i}","title":"Rumus Turunan dengan Deret Taylor"},{"location":"Turunan-Numerik/#rumus_turunan_dengan_hampiran_polinom_interpolasi","text":"","title":"Rumus Turunan dengan Hampiran Polinom Interpolasi"},{"location":"license/","text":"License \u00b6 MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY Support Author \u00b6 Amazon wish list","title":"License"},{"location":"license/#license","text":"MIT License The graduate cap icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY","title":"License"},{"location":"license/#support_author","text":"Amazon wish list","title":"Support Author"},{"location":"material-for-mkdocs/","text":"Material for MkDocs \u00b6 MkDocs \u00b6 mkdocs/mkdocs: Project documentation with Markdown - GitHub Material for MkDocs \u00b6 squidfunk/mkdocs-material: A Material Design theme for MkDocs","title":"Material for MkDocs"},{"location":"material-for-mkdocs/#material_for_mkdocs","text":"","title":"Material for MkDocs"},{"location":"material-for-mkdocs/#mkdocs","text":"mkdocs/mkdocs: Project documentation with Markdown - GitHub","title":"MkDocs"},{"location":"material-for-mkdocs/#material_for_mkdocs_1","text":"squidfunk/mkdocs-material: A Material Design theme for MkDocs","title":"Material for MkDocs"},{"location":"extensions/code-hilite/","text":"CodeHilite \u00b6 CodeHilite - Material for MkDocs Supported languages - Pygments Configure mkdocs.yml \u00b6 markdown_extensions: - codehilite","title":"CodeHilite"},{"location":"extensions/code-hilite/#codehilite","text":"CodeHilite - Material for MkDocs Supported languages - Pygments","title":"CodeHilite"},{"location":"extensions/code-hilite/#configure_mkdocsyml","text":"markdown_extensions: - codehilite","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/","text":"Footnote \u00b6 Footnotes - Material for MkDocs Configure mkdocs.yml \u00b6 markdown_extensions: - footnotes Example \u00b6 Footnote example 1. 1 Footnote example 2. 2 One line \u21a9 First line Second line \u21a9","title":"Footnote"},{"location":"extensions/footnote/#footnote","text":"Footnotes - Material for MkDocs","title":"Footnote"},{"location":"extensions/footnote/#configure_mkdocsyml","text":"markdown_extensions: - footnotes","title":"Configure mkdocs.yml"},{"location":"extensions/footnote/#example","text":"Footnote example 1. 1 Footnote example 2. 2 One line \u21a9 First line Second line \u21a9","title":"Example"},{"location":"extensions/mathjax/","text":"MathJax \u00b6 PyMdown - Material for MkDocs Configure mkdocs.yml \u00b6 markdown_extensions: - mdx_math: enable_dollar_delimiter: True Example code \u00b6 $$ P \\c dot Q = \\| P \\|\\| Q \\|\\c os \\a lpha $$ Example rendering \u00b6 P\\cdot Q = \\|P\\|\\|Q\\|\\cos\\alpha","title":"MathJax"},{"location":"extensions/mathjax/#mathjax","text":"PyMdown - Material for MkDocs","title":"MathJax"},{"location":"extensions/mathjax/#configure_mkdocsyml","text":"markdown_extensions: - mdx_math: enable_dollar_delimiter: True","title":"Configure mkdocs.yml"},{"location":"extensions/mathjax/#example_code","text":"$$ P \\c dot Q = \\| P \\|\\| Q \\|\\c os \\a lpha $$","title":"Example code"},{"location":"extensions/mathjax/#example_rendering","text":"P\\cdot Q = \\|P\\|\\|Q\\|\\cos\\alpha","title":"Example rendering"},{"location":"getting-started/docker/","text":"Start with Docker \u00b6 Public docker image \u00b6 Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub docker-compose \u00b6 Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"Start with Docker"},{"location":"getting-started/docker/#start_with_docker","text":"","title":"Start with Docker"},{"location":"getting-started/docker/#public_docker_image","text":"Package mkdocs-material - GitHub peaceiris/mkdocs-material - Docker Hub","title":"Public docker image"},{"location":"getting-started/docker/#docker-compose","text":"Here is an example docker-compose.yml Please check the latest tag before you go. docker-compose up Go to http://localhost:8000/","title":"docker-compose"},{"location":"getting-started/download-boilerplate/","text":"Download boilerplate \u00b6 Git clone \u00b6 git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate Download zip \u00b6 wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#download_boilerplate","text":"","title":"Download boilerplate"},{"location":"getting-started/download-boilerplate/#git_clone","text":"git clone https://github.com/peaceiris/mkdocs-material-boilerplate.git cd mkdocs-material-boilerplate","title":"Git clone"},{"location":"getting-started/download-boilerplate/#download_zip","text":"wget 'https://github.com/peaceiris/mkdocs-material-boilerplate/archive/master.zip' unzip master.zip cd mkdocs-material-boilerplate-master \ud83d\udc49 Click me to download zip","title":"Download zip"},{"location":"getting-started/invoke/","text":"Serve and open with invoke \u00b6 invoke \u00b6 Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution. Serve and open \u00b6 Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml Show all tasks \u00b6 $ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv [ oke ] [ --core-opts ] serve [ --options ] [ other tasks here ... ] Docstring: Serve site and open browser Options: -c STRING, --config-file = STRING Provide a specific MkDocs config -d STRING, --dev-addr = STRING IP address and port to serve documentation locally ( default: localhost:8000 ) Tasks are defined by tasks.py","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#serve_and_open_with_invoke","text":"","title":"Serve and open with invoke"},{"location":"getting-started/invoke/#invoke","text":"Invoke is a Python (2.7 and 3.4+) library for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. It draws inspiration from various sources (make/rake, Fabric 1.x, etc) to arrive at a powerful & clean feature set. pyinvoke/invoke: Pythonic task management & command execution.","title":"invoke"},{"location":"getting-started/invoke/#serve_and_open","text":"Run mkdocs serve and open browser automatically. inv serve Serving on localhost:8000 # set IP and port inv serve --dev-addr 'localhost:5000' # set config file inv serve --config-file ./mkdocs-sample.yml","title":"Serve and open"},{"location":"getting-started/invoke/#show_all_tasks","text":"$ inv --list Available tasks: serve Serve site and open browser Show task help. $ inv serve --help Usage: inv [ oke ] [ --core-opts ] serve [ --options ] [ other tasks here ... ] Docstring: Serve site and open browser Options: -c STRING, --config-file = STRING Provide a specific MkDocs config -d STRING, --dev-addr = STRING IP address and port to serve documentation locally ( default: localhost:8000 ) Tasks are defined by tasks.py","title":"Show all tasks"},{"location":"getting-started/pip/","text":"Start with pip (Anaconda, Miniconda) \u00b6 pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pip/#start_with_pip_anaconda_miniconda","text":"pip install -r requirements.txt pip install -r requirements-dev.txt inv command is also available.","title":"Start with pip (Anaconda, Miniconda)"},{"location":"getting-started/pipenv/","text":"Start with pipenv \u00b6 pipenv \u00b6 Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans. Install all packages \u00b6 pipenv sync --dev # Installs all packages specified in Pipfile.lock. Run MkDocs \u00b6 pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve pipenv run \u00b6 pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"Start with pipenv"},{"location":"getting-started/pipenv/#start_with_pipenv","text":"","title":"Start with pipenv"},{"location":"getting-started/pipenv/#pipenv","text":"Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. pypa/pipenv: Python Development Workflow for Humans.","title":"pipenv"},{"location":"getting-started/pipenv/#install_all_packages","text":"pipenv sync --dev # Installs all packages specified in Pipfile.lock.","title":"Install all packages"},{"location":"getting-started/pipenv/#run_mkdocs","text":"pipenv shell # Spawns a shell within the virtualenv. mkdocs serve Or, run mkdocs with pipenv run pipenv run mkdocs serve","title":"Run MkDocs"},{"location":"getting-started/pipenv/#pipenv_run","text":"pipenv task are also defined by Pipfile pipenv run version # mkdocs --version pipenv run help # mkdocs --help pipenv run inv serve # inv serve pipenv run serve # mkdocs serve pipenv run build # mkdocs build pipenv run deploy # mkdocs gh-deploy","title":"pipenv run"},{"location":"hosting-and-deployment/aws-amplify-console/","text":"Host on AWS Amplify Console \u00b6 AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/aws-amplify-console/#host_on_aws_amplify_console","text":"AWS Amplify Console You can use Password protection each branch. Use the following build specification YML file. mkdocs-material-boilerplate/amplify.yml","title":"Host on AWS Amplify Console"},{"location":"hosting-and-deployment/combinations/","text":"Hosting and Deployment \u00b6 GitHub Pages and GitHub \u00b6 Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions GitLab Pages and GitLab \u00b6 Host source code on GitLab. Build and deploy with GitLab CI/CD. Netlify \u00b6 Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify. AWS Amplify Console \u00b6 Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#hosting_and_deployment","text":"","title":"Hosting and Deployment"},{"location":"hosting-and-deployment/combinations/#github_pages_and_github","text":"Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions","title":"GitHub Pages and GitHub"},{"location":"hosting-and-deployment/combinations/#gitlab_pages_and_gitlab","text":"Host source code on GitLab. Build and deploy with GitLab CI/CD.","title":"GitLab Pages and GitLab"},{"location":"hosting-and-deployment/combinations/#netlify","text":"Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify.","title":"Netlify"},{"location":"hosting-and-deployment/combinations/#aws_amplify_console","text":"Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"AWS Amplify Console"},{"location":"hosting-and-deployment/github-pages/","text":"Host on GitHub Pages \u00b6 Demo site on GitHub Pages (build & deploy with GitHub Actions) Build and deploy with GitHub Actions \u00b6 peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details. Build and deploy with mkdocs gh-deploy \u00b6 pipenv \u00b6 pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#host_on_github_pages","text":"Demo site on GitHub Pages (build & deploy with GitHub Actions)","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/github-pages/#build_and_deploy_with_github_actions","text":"peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details.","title":"Build and deploy with GitHub Actions"},{"location":"hosting-and-deployment/github-pages/#build_and_deploy_with_mkdocs_gh-deploy","text":"","title":"Build and deploy with mkdocs gh-deploy"},{"location":"hosting-and-deployment/github-pages/#pipenv","text":"pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"pipenv"},{"location":"hosting-and-deployment/gitlab-pages/","text":"Host on GitLab Pages \u00b6 See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/gitlab-pages/#host_on_gitlab_pages","text":"See .gitlab-ci.yml","title":"Host on GitLab Pages"},{"location":"hosting-and-deployment/netlify/","text":"Host on Netlify \u00b6 Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"},{"location":"hosting-and-deployment/netlify/#host_on_netlify","text":"Demo site on Netlify (build & deploy with Netlify) Create GitHub repository and deploy to Netlify with the following button in 1 min.","title":"Host on Netlify"}]}